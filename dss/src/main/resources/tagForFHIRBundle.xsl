<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="xs xsi ds4p" version="2.0"
    xpath-default-namespace="http://hl7.org/fhir" xmlns:ds4p="http://www.siframework.org/ds4p">

    <!-- Implements FHIR Bundle tagging per FHIR Security Labels and HCS. -->

    <xsl:output indent="yes"/>

    <!-- Retrieves Drools rules execution response, parses it, and returns its document node. -->
    <xsl:variable name="ruleExecutionResponseContainer" select="document('ruleExecutionResponseContainer')"/>
    <xsl:variable name="factModel" select="document('factModel')"/>

    <!-- Bundle level confidentiality code -->
    <!-- Get most restrictive entry-level confidentiality code in the execution response container. This returns a double. -->
    <xsl:variable name="documentConfidentialityCodeNumeric"
        select="max(ds4p:mapConfCodeFromChartoNumber($ruleExecutionResponseContainer//impliedConfSection[following-sibling::itemAction != 'REDACT']))"/>

    <!-- Map the most restrictive entry-level confidentiality code in the execution response container to V, R, or N. -->
    <xsl:variable name="documentConfidentialityCode"
        select="ds4p:mapConfCodeFromNumtoChar($documentConfidentialityCodeNumeric)"/>

    <xsl:variable name="customSectionList" select="document('customSectionList')"/>

    <!-- FUNCTIONS -->
    <!-- This function maps a numeric confidentiality code to V, N, or R. -->
    <xsl:function name="ds4p:mapConfCodeFromNumtoChar" as="xs:string">
        <xsl:param name="confidentialityCodeNumeric"/>
        <xsl:choose>
            <xsl:when test="$confidentialityCodeNumeric = 3">V</xsl:when>
            <xsl:when test="$confidentialityCodeNumeric = 2">R</xsl:when>
            <xsl:when test="$confidentialityCodeNumeric = 1">N</xsl:when>
            <xsl:otherwise>N</xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This function maps a char (V, N, or R) confidentiality code to numeric. -->
    <xsl:function name="ds4p:mapConfCodeFromChartoNumber" as="xs:integer">
        <xsl:param name="confidentialityCodeChar"/>
        <xsl:choose>
            <xsl:when test="$confidentialityCodeChar = 'V'">3</xsl:when>
            <xsl:when test="$confidentialityCodeChar = 'R'">2</xsl:when>
            <xsl:when test="$confidentialityCodeChar = 'N'">1</xsl:when>
            <xsl:otherwise>1</xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This function maps a char (V, N, or R) confidentiality code to a readable text. -->
    <xsl:function name="ds4p:mapConfCodeFromChartoText" as="xs:string">
        <xsl:param name="confidentialityCodeChar"/>
        <xsl:choose>
            <xsl:when test="$confidentialityCodeChar = 'V'">Very Restricted</xsl:when>
            <xsl:when test="$confidentialityCodeChar = 'R'">Restricted</xsl:when>
            <xsl:when test="$confidentialityCodeChar = 'N'">Normal</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$confidentialityCodeChar"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This funtion maps a document obligation policy code to a readable text. -->
    <xsl:function name="ds4p:mapDocObligationPolicyFromCodetoText" as="xs:string">
        <xsl:param name="docObligationPolicyFromCode"/>
        <xsl:choose>
            <xsl:when test="$docObligationPolicyFromCode = 'ENCRYPT'">Encrypt information</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$docObligationPolicyFromCode"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This function maps a document refrain policy code to a readable text.  -->
    <xsl:function name="ds4p:mapDocRefrainPolicyFromCodetoText" as="xs:string">
        <xsl:param name="docRefrainPolicyFromCode"/>
        <xsl:choose>
            <xsl:when test="$docRefrainPolicyFromCode = 'NORDSLCD'">Prohibition on redisclosure without patient consent directive</xsl:when>
            <xsl:when test="$docRefrainPolicyFromCode = 'NODSCLCD'">Prohibition on disclosure without patient consent directive</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$docRefrainPolicyFromCode"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This function returns the most restrictive confidentiality code of a given entry (entry id is autogenerated previously). 
         It returns null if nothing is found in ruleExecutionResponseContainer.-->
    <xsl:function name="ds4p:getConfidentialityCodeByEntryId" as="xs:string">
        <xsl:param name="entryId"/>
        <xsl:variable name="confCodes"
            select="$ruleExecutionResponseContainer//executionResponse[child::entry[.=$entryId]]/impliedConfSection"/>
        <xsl:choose>
            <xsl:when test="$confCodes">
                <xsl:value-of
                    select="ds4p:mapConfCodeFromNumtoChar(max(ds4p:mapConfCodeFromChartoNumber($confCodes)))"
                />
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$confCodes"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This function returns the most restrictive section level confidentiality code of a given section. 
         The confidentiality of redacted entries are ignored. If no confidentiality value is found for a given section, it returns 'N'. -->
    <xsl:function name="ds4p:getConfidentialityCodeBySectionCode" as="xs:string">
        <xsl:param name="sectionCode"/>
        <xsl:variable name="confCodes"
            select="$ruleExecutionResponseContainer//executionResponse[child::c32SectionLoincCode[.=$sectionCode]][child::itemAction!='REDACT']/impliedConfSection"/>
        <xsl:value-of
            select="ds4p:mapConfCodeFromNumtoChar(max(ds4p:mapConfCodeFromChartoNumber($confCodes)))"
        />
    </xsl:function>

    <!-- This function returns the first document obligation policy code for a given entry. -->
    <xsl:function name="ds4p:getDocumentObligationCodeByEntryId" as="xs:string">
        <xsl:param name="entryId"/>
        <xsl:variable name="temp"
            select="$ruleExecutionResponseContainer//executionResponse[child::entry[.=$entryId]]/documentObligationPolicy"/>
        <xsl:value-of select="$temp[1]"/>
    </xsl:function>

    <!-- This function returns the first document refrain policy code for a given entry. -->
    <xsl:function name="ds4p:getDocumentRefrainCodeByEntryId" as="xs:string">
        <xsl:param name="entryId"/>
        <xsl:variable name="temp"
            select="$ruleExecutionResponseContainer//executionResponse[child::entry[.=$entryId]]/documentRefrainPolicy"/>
        <xsl:value-of select="$temp[1]"/>
    </xsl:function>

    <!-- TEMPLATES -->
    <!-- Copy all document. -->
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>

    <!-- Bundle level security labels -->
    <xsl:template match="Bundle/meta">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
            <xsl:if test="$documentConfidentialityCode">
                <security xmlns="http://hl7.org/fhir">
                    <!-- TODO: confidentiality system is hardcoded here because it is not available from BRMS -->
                    <system value="http://hl7.org/fhir/v3/Confidentiality"/>
                    <code value="{$documentConfidentialityCode}"/>
                </security>
            </xsl:if>
        </xsl:copy>
    </xsl:template>

    <!-- Bundle entry (single resource) level security labels -->
    <xsl:template match="Bundle/entry/resource/*/meta">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
            <xsl:variable name="entryId" select="ancestor-or-self::entry/generatedEntryId/text()"/>

            <xsl:for-each select="$factModel//ClinicalFact[entry[text()=$entryId]]//valueSetCategory">
                <!-- HCS: Sensitivity Category -->
                <security xmlns="http://hl7.org/fhir">
                    <!-- TODO: value set category system is hardcoded here because it is not available from PCM -->
                    <system value="http://hl7.org/fhir/v3/ActCode"/>
                    <code value="{text()}"/>
                </security>
            </xsl:for-each>

            <xsl:for-each select="$ruleExecutionResponseContainer//executionResponse[entry[text()=$entryId]]">
                <!-- HCS: Confidentiality Classification -->
                <xsl:if test="impliedConfSection/text()">
                    <security xmlns="http://hl7.org/fhir">
                        <!-- TODO: confidentiality system is hardcoded here because it is not available from BRMS -->
                        <system value="http://hl7.org/fhir/v3/Confidentiality"/>
                        <code value="{impliedConfSection/text()}"/>
                    </security>
                </xsl:if>

                <!-- HCS: Handling Caveat -->
                <!-- Document Obligation Policy -->
                <xsl:if test="documentObligationPolicy/text()">
                    <security xmlns="http://hl7.org/fhir">
                        <!-- TODO: document obligation policy system is hardcoded here because it is not available from BRMS -->
                        <system value="http://hl7.org/fhir/v3/ActCode"/>
                        <code value="{documentObligationPolicy/text()}"/>
                    </security>
                </xsl:if>

                <!-- Document Refrain Policy -->
                <xsl:if test="documentRefrainPolicy/text()">
                    <security xmlns="http://hl7.org/fhir">
                        <!-- TODO: document refrain policy system is hardcoded here because it is not available from BRMS -->
                        <system value="http://hl7.org/fhir/v3/ActCode"/>
                        <code value="{documentRefrainPolicy/text()}"/>
                    </security>
                </xsl:if>

                <!-- HCS: US Privacy Law -->
                <xsl:if test="USPrivacyLaw/text()">
                    <security xmlns="http://hl7.org/fhir">
                        <!-- TODO: US Privacy Law system is hardcoded here because it is not available from BRMS -->
                        <system value="http://hl7.org/fhir/v3/ActCode"/>
                        <code value="{USPrivacyLaw/text()}"/>
                    </security>
                </xsl:if>
            </xsl:for-each>

        </xsl:copy>

    </xsl:template>

</xsl:stylesheet>