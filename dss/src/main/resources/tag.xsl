<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:sdtc="urn:hl7-org:sdtc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="xs" version="2.0"
    xpath-default-namespace="urn:hl7-org:v3" xmlns:ds4p="http://www.siframework.org/ds4p">

    <!-- Implements document, section, and entry level confidentiality tagging per DS4P implementation guide. -->

    <xsl:output indent="yes"/>

    <!-- Retrieves Drools rules execution response, parses it, and returns its document node. -->
    <xsl:variable name="ruleExecutionResponseContainer"
        select="document('ruleExecutionResponseContainer')"/>

    <!-- Document level confidentiality code -->
    <!-- Get most restrictive entry-level confidentiality code in the execution response container. This returns a double. -->
    <xsl:variable name="documentConfidentialityCodeNumeric"
        select="max(ds4p:mapConfCodeFromChartoNumber($ruleExecutionResponseContainer//impliedConfSection[following-sibling::itemAction != 'REDACT']))"/>

    <!-- Map the most restrictive entry-level confidentiality code in the execution response container to V, R, or N. -->
    <xsl:variable name="documentConfidentialityCode"
        select="ds4p:mapConfCodeFromNumtoChar($documentConfidentialityCodeNumeric)"/>

    <xsl:variable name="disclaimer"
        select="document('disclaimer')"/>

    <!-- FUNCTIONS -->
    <!-- This function maps a numeric confidentiality code to V, N, or R. -->
    <xsl:function name="ds4p:mapConfCodeFromNumtoChar" as="xs:string">
        <xsl:param name="confidentialityCodeNumeric"/>
        <xsl:choose>
            <xsl:when test="$confidentialityCodeNumeric = 3">V</xsl:when>
            <xsl:when test="$confidentialityCodeNumeric = 2">R</xsl:when>
            <xsl:when test="$confidentialityCodeNumeric = 1">N</xsl:when>
            <xsl:otherwise>N</xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This function maps a char (V, N, or R) confidentiality code to numeric. -->
    <xsl:function name="ds4p:mapConfCodeFromChartoNumber" as="xs:integer">
        <xsl:param name="confidentialityCodeChar"/>
        <xsl:choose>
            <xsl:when test="$confidentialityCodeChar = 'V'">3</xsl:when>
            <xsl:when test="$confidentialityCodeChar = 'R'">2</xsl:when>
            <xsl:when test="$confidentialityCodeChar = 'N'">1</xsl:when>
            <xsl:otherwise>1</xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This function maps a char (V, N, or R) confidentiality code to a readable text. -->
    <xsl:function name="ds4p:mapConfCodeFromChartoText" as="xs:string">
        <xsl:param name="confidentialityCodeChar"/>
        <xsl:choose>
            <xsl:when test="$confidentialityCodeChar = 'V'">Very Restricted</xsl:when>
            <xsl:when test="$confidentialityCodeChar = 'R'">Restricted</xsl:when>
            <xsl:when test="$confidentialityCodeChar = 'N'">Normal</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$confidentialityCodeChar"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This funtion maps a document obligation policy code to a readable text. -->
    <xsl:function name="ds4p:mapDocObligationPolicyFromCodetoText" as="xs:string">
        <xsl:param name="docObligationPolicyFromCode"/>
        <xsl:choose>
            <xsl:when test="$docObligationPolicyFromCode = 'ENCRYPT'">Encrypt information</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$docObligationPolicyFromCode"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This function maps a document refrain policy code to a readable text.  -->
    <xsl:function name="ds4p:mapDocRefrainPolicyFromCodetoText" as="xs:string">
        <xsl:param name="docRefrainPolicyFromCode"/>
        <xsl:choose>
            <xsl:when test="$docRefrainPolicyFromCode = 'NORDSLCD'">Prohibition on redisclosure
                without patient consent directive</xsl:when>
            <xsl:when test="$docRefrainPolicyFromCode = 'NODSCLCD'">Prohibition on disclosure
                without patient consent directive</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$docRefrainPolicyFromCode"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This function returns the most restrictive confidentiality code of a given entry (entry id is autogenerated previously). 
         It returns null if nothing is found in ruleExecutionResponseContainer.-->
    <xsl:function name="ds4p:getConfidentialityCodeByEntryId" as="xs:string">
        <xsl:param name="entryId"/>
        <xsl:variable name="confCodes"
            select="$ruleExecutionResponseContainer//executionResponse[child::entry[.=$entryId]]/impliedConfSection"/>
        <xsl:choose>
            <xsl:when test="$confCodes">
                <xsl:value-of
                    select="ds4p:mapConfCodeFromNumtoChar(max(ds4p:mapConfCodeFromChartoNumber($confCodes)))"
                />
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$confCodes"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>

    <!-- This function returns the most restrictive section level confidentiality code of a given section. 
         The confidentiality of redacted entries are ignored. If no confidentiality value is found for a given section, it returns 'N'. -->
    <xsl:function name="ds4p:getConfidentialityCodeBySectionCode" as="xs:string">
        <xsl:param name="sectionCode"/>
        <xsl:variable name="confCodes"
            select="$ruleExecutionResponseContainer//executionResponse[child::c32SectionLoincCode[.=$sectionCode]][child::itemAction!='REDACT']/impliedConfSection"/>
        <xsl:value-of
            select="ds4p:mapConfCodeFromNumtoChar(max(ds4p:mapConfCodeFromChartoNumber($confCodes)))"
        />
    </xsl:function>

    <!-- This function returns the first document obligation policy code for a given entry. -->
    <xsl:function name="ds4p:getDocumentObligationCodeByEntryId" as="xs:string">
        <xsl:param name="entryId"/>
        <xsl:variable name="temp"
            select="$ruleExecutionResponseContainer//executionResponse[child::entry[.=$entryId]]/documentObligationPolicy"/>
        <xsl:value-of select="$temp[1]"/>
    </xsl:function>

    <!-- This function returns the first document refrain policy code for a given entry. -->
    <xsl:function name="ds4p:getDocumentRefrainCodeByEntryId" as="xs:string">
        <xsl:param name="entryId"/>
        <xsl:variable name="temp"
            select="$ruleExecutionResponseContainer//executionResponse[child::entry[.=$entryId]]/documentRefrainPolicy"/>
        <xsl:value-of select="$temp[1]"/>
    </xsl:function>

    <!-- TEMPLATES -->
    <!-- Copy all document. -->
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>
    
    <!-- Add CDA stylesheet to the C32 -->
    <xsl:template match="/">
        <xsl:copy>
            <xsl:call-template name="addStylesheet"/>      
            <xsl:apply-templates select="ClinicalDocument"/>
        </xsl:copy>
    </xsl:template>

    <!--Document-level confidentiality code. -->
    <xsl:template match="ClinicalDocument/confidentialityCode">
        <confidentialityCode code="{$documentConfidentialityCode}"
            codeSystem="2.16.840.1.113883.5.25" xmlns="urn:hl7-org:v3"/>
    </xsl:template>

    <xsl:template match="structuredBody" exclude-result-prefixes="#all">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="confidentialityCode"/>
            <xsl:apply-templates select="languageCode"/>
            <!-- DISCLAIMER -->
            <component xmlns="urn:hl7-org:v3">
                <section>
                    <id root="971d6e27-9dae-451d-8d8f-a9923d4ec416"/>
                    <code code="DISCLAIMER" codeSystem="2.25.85119437033116720353817881047915448747"
                        codeSystemName="OBHITA Consent2Share Disclaimer Codes"
                        displayName="DISCLAIMER"/>
                    <xsl:sequence select="$disclaimer/disclaimerText/*"/>
                </section>
            </component>
            <!-- PROHIBITION ON RE-DISCLOSURE -->
            <component xmlns="urn:hl7-org:v3">
                <section>
                    <id root="06c23f3e-b0de-44d1-9bd6-769e82a891c6"/>
                    <code code="PROHIBITION_ON_REDISCLOSURE"
                        codeSystem="2.25.85119437033116720353817881047915448747"
                        codeSystemName="OBHITA Consent2Share Disclaimer Codes"
                        displayName="PROHIBITION ON RE-DISCLOSURE "/>
                    <title>***PLEASE READ PROHIBITION ON RE-DISCLOSURE***</title>
                    <text>&quot;This information has been disclosed to you from records protected by
                        Federal confidentiality rules (42 CFR part 2). The Federal rules prohibit
                        you from making any further disclosure of this information unless further
                        disclosure is expressly permitted by the written consent of the person to
                        whom it pertains or as otherwise permitted by 42 CFR part 2. A general
                        authorization for the release of medical or other information is NOT
                        sufficient for this purpose. The Federal rules restrict any use of the
                        information to criminally investigate or prosecute any alcohol or drug abuse
                        patient.&quot;<br/>(42 C.F.R. § 2.32)</text>
                </section>
            </component>
            <xsl:apply-templates select="component"/>
        </xsl:copy>
    </xsl:template>

    <!-- Section-level confidentiality code. -->
    <xsl:template match="section[parent::component[parent::structuredBody]]">
        <!-- Find section LOINC code -->
        <xsl:variable name="sectionLoincCode" select="./code/@code"/>
        <!-- Get section-level confidentiality code value. -->
        <xsl:variable name="sectionConfidentialityCode"
            select="ds4p:getConfidentialityCodeBySectionCode($sectionLoincCode)"/>
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="id"/>
            <xsl:apply-templates select="code"/>
            <xsl:apply-templates select="title"/>
            <xsl:apply-templates select="text"/>
            <!-- If the function returns a section confidentiality code, use that. Otherwise, use the current value in the document if it exists. -->
            <xsl:choose>
                <xsl:when test="$sectionConfidentialityCode">
                    <confidentialityCode code="{$sectionConfidentialityCode}"
                        codeSystem="2.16.840.1.113883.5.25" xmlns="urn:hl7-org:v3"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:apply-templates select="confidentialityCode"/>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:apply-templates select="languageCode"/>
            <xsl:apply-templates select="subject"/>
            <xsl:apply-templates select="author"/>
            <xsl:apply-templates select="informant"/>
            <xsl:apply-templates select="entry"/>
            <xsl:apply-templates select="component"/>
        </xsl:copy>
    </xsl:template>

    <!-- Entry-level confidentiality code. -->
    <!-- Template for act. -->
    <xsl:template match="act[parent::entry]" exclude-result-prefixes="#all">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="id"/>
            <xsl:apply-templates select="code"/>
            <xsl:apply-templates select="text"/>
            <xsl:apply-templates select="statusCode"/>
            <xsl:apply-templates select="effectiveTime"/>
            <xsl:apply-templates select="priorityCode"/>
            <xsl:apply-templates select="languageCode"/>
            <xsl:apply-templates select="subject"/>
            <xsl:apply-templates select="specimen"/>
            <xsl:apply-templates select="performer"/>
            <xsl:apply-templates select="author"/>
            <xsl:apply-templates select="informant"/>
            <xsl:apply-templates select="participant"/>
            <xsl:apply-templates select="entryRelationship"/>
            <xsl:call-template name="entryRelationshipWithPrivacyAnnotation"/>
            <xsl:apply-templates select="reference"/>
            <xsl:apply-templates select="precondition"/>
        </xsl:copy>
    </xsl:template>

    <!-- Template for encounter. -->
    <xsl:template match="encounter[parent::entry]" exclude-result-prefixes="#all">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="id"/>
            <xsl:apply-templates select="code"/>
            <xsl:apply-templates select="text"/>
            <xsl:apply-templates select="statusCode"/>
            <xsl:apply-templates select="effectiveTime"/>
            <xsl:apply-templates select="priorityCode"/>
            <xsl:apply-templates select="subject"/>
            <xsl:apply-templates select="specimen"/>
            <xsl:apply-templates select="performer"/>
            <xsl:apply-templates select="author"/>
            <xsl:apply-templates select="informant"/>
            <xsl:apply-templates select="participant"/>
            <xsl:apply-templates select="entryRelationship"/>
            <xsl:call-template name="entryRelationshipWithPrivacyAnnotation"/>
            <xsl:apply-templates select="reference"/>
            <xsl:apply-templates select="precondition"/>
        </xsl:copy>
    </xsl:template>

    <!-- Template for observation. -->
    <xsl:template match="observation[parent::entry]" exclude-result-prefixes="#all">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="id"/>
            <xsl:apply-templates select="code"/>
            <xsl:apply-templates select="derivationExpr"/>
            <xsl:apply-templates select="text"/>
            <xsl:apply-templates select="statusCode"/>
            <xsl:apply-templates select="effectiveTime"/>
            <xsl:apply-templates select="priorityCode"/>
            <xsl:apply-templates select="repeatNumber"/>
            <xsl:apply-templates select="languageCode"/>
            <xsl:apply-templates select="value"/>
            <xsl:apply-templates select="interpretationCode"/>
            <xsl:apply-templates select="methodCode"/>
            <xsl:apply-templates select="targetSiteCode"/>
            <xsl:apply-templates select="subject"/>
            <xsl:apply-templates select="specimen"/>
            <xsl:apply-templates select="performer"/>
            <xsl:apply-templates select="author"/>
            <xsl:apply-templates select="informant"/>
            <xsl:apply-templates select="participant"/>
            <xsl:apply-templates select="entryRelationship"/>
            <xsl:call-template name="entryRelationshipWithPrivacyAnnotation"/>
            <xsl:apply-templates select="reference"/>
            <xsl:apply-templates select="precondition"/>
            <xsl:apply-templates select="referenceRange"/>
        </xsl:copy>
    </xsl:template>

    <!-- Template for observationMedia. -->
    <xsl:template match="observationMedia[parent::entry]" exclude-result-prefixes="#all">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="id"/>
            <xsl:apply-templates select="languageCode"/>
            <xsl:apply-templates select="value"/>
            <xsl:apply-templates select="subject"/>
            <xsl:apply-templates select="specimen"/>
            <xsl:apply-templates select="performer"/>
            <xsl:apply-templates select="author"/>
            <xsl:apply-templates select="informant"/>
            <xsl:apply-templates select="participant"/>
            <xsl:apply-templates select="entryRelationship"/>
            <xsl:call-template name="entryRelationshipWithPrivacyAnnotation"/>
            <xsl:apply-templates select="reference"/>
            <xsl:apply-templates select="precondition"/>
        </xsl:copy>
    </xsl:template>

    <!-- Template for organizer. -->
    <xsl:template match="organizer[parent::entry]" exclude-result-prefixes="#all">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="id"/>
            <xsl:apply-templates select="code"/>
            <xsl:apply-templates select="statusCode"/>
            <xsl:apply-templates select="effectiveTime"/>
            <xsl:apply-templates select="subject"/>
            <xsl:apply-templates select="specimen"/>
            <xsl:apply-templates select="performer"/>
            <xsl:apply-templates select="author"/>
            <xsl:apply-templates select="informant"/>
            <xsl:apply-templates select="participant"/>
            <xsl:apply-templates select="reference"/>
            <xsl:apply-templates select="precondition"/>
            <xsl:apply-templates select="component"/>
            <xsl:call-template name="componentWithPrivacyAnnotation"/>
        </xsl:copy>
    </xsl:template>

    <!-- Template for procedure. -->
    <xsl:template match="procedure[parent::entry]" exclude-result-prefixes="#all">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="id"/>
            <xsl:apply-templates select="code"/>
            <xsl:apply-templates select="text"/>
            <xsl:apply-templates select="statusCode"/>
            <xsl:apply-templates select="effectiveTime"/>
            <xsl:apply-templates select="priorityCode"/>
            <xsl:apply-templates select="languageCode"/>
            <xsl:apply-templates select="methodCode"/>
            <xsl:apply-templates select="approachSiteCode"/>
            <xsl:apply-templates select="targetSiteCode"/>
            <xsl:apply-templates select="subject"/>
            <xsl:apply-templates select="specimen"/>
            <xsl:apply-templates select="performer"/>
            <xsl:apply-templates select="author"/>
            <xsl:apply-templates select="informant"/>
            <xsl:apply-templates select="participant"/>
            <xsl:apply-templates select="entryRelationship"/>
            <xsl:call-template name="entryRelationshipWithPrivacyAnnotation"/>
            <xsl:apply-templates select="reference"/>
            <xsl:apply-templates select="precondition"/>
        </xsl:copy>
    </xsl:template>

    <!-- Template for regionOfInterest. -->
    <xsl:template match="regionOfInterest[parent::entry]" exclude-result-prefixes="#all">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="id"/>
            <xsl:apply-templates select="code"/>
            <xsl:apply-templates select="value"/>
            <xsl:apply-templates select="subject"/>
            <xsl:apply-templates select="specimen"/>
            <xsl:apply-templates select="performer"/>
            <xsl:apply-templates select="author"/>
            <xsl:apply-templates select="informant"/>
            <xsl:apply-templates select="participant"/>
            <xsl:apply-templates select="entryRelationship"/>
            <xsl:call-template name="entryRelationshipWithPrivacyAnnotation"/>
            <xsl:apply-templates select="reference"/>
            <xsl:apply-templates select="precondition"/>
        </xsl:copy>
    </xsl:template>

    <!-- Template for substanceAdministration. -->
    <xsl:template match="substanceAdministration[parent::entry]" exclude-result-prefixes="#all">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="id"/>
            <xsl:apply-templates select="code"/>
            <xsl:apply-templates select="text"/>
            <xsl:apply-templates select="statusCode"/>
            <xsl:apply-templates select="effectiveTime"/>
            <xsl:apply-templates select="priorityCode"/>
            <xsl:apply-templates select="repeatNumber"/>
            <xsl:apply-templates select="routeCode"/>
            <xsl:apply-templates select="approachSiteCode"/>
            <xsl:apply-templates select="doseQuantity"/>
            <xsl:apply-templates select="rateQuantity"/>
            <xsl:apply-templates select="maxDoseQuantity"/>
            <xsl:apply-templates select="administrationUnitCode"/>
            <xsl:apply-templates select="subject"/>
            <xsl:apply-templates select="specimen"/>
            <xsl:apply-templates select="consumable"/>
            <xsl:apply-templates select="performer"/>
            <xsl:apply-templates select="author"/>
            <xsl:apply-templates select="informant"/>
            <xsl:apply-templates select="participant"/>
            <xsl:apply-templates select="entryRelationship"/>
            <xsl:call-template name="entryRelationshipWithPrivacyAnnotation"/>
            <xsl:apply-templates select="reference"/>
            <xsl:apply-templates select="precondition"/>
        </xsl:copy>
    </xsl:template>

    <!-- Template for supply. -->
    <xsl:template match="supply[parent::entry]" exclude-result-prefixes="#all">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="realmCode"/>
            <xsl:apply-templates select="typeId"/>
            <xsl:apply-templates select="templateId"/>
            <xsl:apply-templates select="id"/>
            <xsl:apply-templates select="code"/>
            <xsl:apply-templates select="text"/>
            <xsl:apply-templates select="statusCode"/>
            <xsl:apply-templates select="effectiveTime"/>
            <xsl:apply-templates select="priorityCode"/>
            <xsl:apply-templates select="repeatNumber"/>
            <xsl:apply-templates select="independentInd"/>
            <xsl:apply-templates select="quantity"/>
            <xsl:apply-templates select="expectedUseTime"/>
            <xsl:apply-templates select="subject"/>
            <xsl:apply-templates select="specimen"/>
            <xsl:apply-templates select="product"/>
            <xsl:apply-templates select="performer"/>
            <xsl:apply-templates select="author"/>
            <xsl:apply-templates select="informant"/>
            <xsl:apply-templates select="participant"/>
            <xsl:apply-templates select="entryRelationship"/>
            <xsl:call-template name="entryRelationshipWithPrivacyAnnotation"/>
            <xsl:apply-templates select="reference"/>
            <xsl:apply-templates select="precondition"/>
        </xsl:copy>
    </xsl:template>

    <!-- TEMPLATE SNIPPETS -->
    <!-- Component with privacy annotation markings. -->
    <xsl:template name="componentWithPrivacyAnnotation" xmlns="urn:hl7-org:v3"
        exclude-result-prefixes="#all">
        <xsl:variable name="conf"
            select="ds4p:getConfidentialityCodeByEntryId(../generatedEntryId/.)"/>
        <xsl:variable name="docRefrain"
            select="ds4p:getDocumentRefrainCodeByEntryId(../generatedEntryId/.)"/>
        <xsl:variable name="docObligation"
            select="ds4p:getDocumentObligationCodeByEntryId(../generatedEntryId/.)"/>
        <xsl:if test="$conf or $docObligation or $docRefrain">
            <component typeCode="COMP" xmlns="urn:hl7-org:v3">
                <xsl:call-template name="organizerWithPrivacyAnnotation">
                    <xsl:with-param name="conf" select="$conf"/>
                    <xsl:with-param name="docObligation" select="$docObligation"/>
                    <xsl:with-param name="docRefrain" select="$docRefrain"/>
                </xsl:call-template>
            </component>
        </xsl:if>
    </xsl:template>

    <!-- Entry relationship with privacy annotation markings. -->
    <xsl:template name="entryRelationshipWithPrivacyAnnotation" xmlns="urn:hl7-org:v3"
        exclude-result-prefixes="#all">
        <xsl:variable name="conf"
            select="ds4p:getConfidentialityCodeByEntryId(../generatedEntryId/.)"/>
        <xsl:variable name="docRefrain"
            select="ds4p:getDocumentRefrainCodeByEntryId(../generatedEntryId/.)"/>
        <xsl:variable name="docObligation"
            select="ds4p:getDocumentObligationCodeByEntryId(../generatedEntryId/.)"/>
        <xsl:if test="$conf or $docObligation or $docRefrain">
            <entryRelationship typeCode="COMP" xmlns="urn:hl7-org:v3">
                <xsl:call-template name="organizerWithPrivacyAnnotation">
                    <xsl:with-param name="conf" select="$conf"/>
                    <xsl:with-param name="docObligation" select="$docObligation"/>
                    <xsl:with-param name="docRefrain" select="$docRefrain"/>
                </xsl:call-template>
            </entryRelationship>
        </xsl:if>
    </xsl:template>

    <!-- Organizer with privacy annotation markings. -->
    <xsl:template name="organizerWithPrivacyAnnotation" xmlns="urn:hl7-org:v3"
        exclude-result-prefixes="#all">
        <xsl:param name="conf"/>
        <xsl:param name="docObligation"/>
        <xsl:param name="docRefrain"/>
        <organizer classCode="CLUSTER" moodCode="DEF">
            <templateId root="2.16.840.1.113883.3.3251.1.4" assigningAuthorityName="HL7 Security"/>
            <statusCode code="active"/>
            <xsl:if test="$conf">
                <component typeCode="COMP">
                    <observation classCode="OBS" moodCode="DEF">
                        <templateId root="2.16.840.1.113883.3.445.21"
                            assigningAuthorityName="HL7 CBCC"/>
                        <templateId root="2.16.840.1.113883.3.445.12"
                            assigningAuthorityName="HL7 CBCC"/>
                        <code code="SECCLASSOBS" codeSystem="2.16.840.1.113883.1.11.20457"
                            codeSystemName="HL7 SecurityObservationTypeCodeSystem"
                            displayName="Security Classification"/>
                        <value xsi:type="CE" code="{$conf}" codeSystem="2.16.840.1.113883.5.1063"
                            codeSystemName="SecurityObservationValueCodeSystem"
                            displayName="{ds4p:mapConfCodeFromChartoText($conf)}">
                            <originalText><xsl:value-of
                                    select="ds4p:mapConfCodeFromChartoText($conf)"/>
                                Confidentiality</originalText>
                        </value>
                    </observation>
                </component>
            </xsl:if>
            <xsl:if test="$docObligation">
                <component typeCode="COMP">
                    <observation classCode="OBS" moodCode="DEF">
                        <templateId root="2.16.840.1.113883.3.445.21"
                            assigningAuthorityName="HL7 CBCC"/>
                        <templateId root="2.16.840.1.113883.3.445.14"
                            assigningAuthorityName="HL7 CBCC"/>
                        <code code="SECCONOBS" codeSystem="2.16.840.1.113883.1.11.20457"
                            codeSystemName="HL7 SecurityObservationTypeCodeSystem"
                            displayName="Security Classification"/>
                        <value xsi:type="CE" code="{$docObligation}"
                            codeSystem="2.16.840.1.113883.5.1063"
                            codeSystemName="SecurityObservationValueCodeSystem"
                            displayName="{ds4p:mapDocObligationPolicyFromCodetoText($docObligation)}">
                            <originalText>
                                <xsl:value-of
                                    select="ds4p:mapDocObligationPolicyFromCodetoText($docObligation)"
                                />
                            </originalText>
                        </value>
                    </observation>
                </component>
            </xsl:if>
            <xsl:if test="$docRefrain">
                <component typeCode="COMP">
                    <observation classCode="OBS" moodCode="DEF">
                        <templateId root="2.16.840.1.113883.3.445.21"
                            assigningAuthorityName="HL7 CBCC"/>
                        <templateId root="2.16.840.1.113883.3.445.23"
                            assigningAuthorityName="HL7 CBCC"/>
                        <code code="SECCONOBS" codeSystem="2.16.840.1.113883.1.11.20457"
                            codeSystemName="HL7 SecurityObservationTypeCodeSystem"
                            displayName="Security Classification"/>
                        <value xsi:type="CE" code="{$docRefrain}"
                            codeSystem="2.16.840.1.113883.5.1063"
                            codeSystemName="SecurityObservationValueCodeSystem"
                            displayName="{ds4p:mapDocRefrainPolicyFromCodetoText($docRefrain)}">
                            <originalText>
                                <xsl:value-of
                                    select="ds4p:mapDocRefrainPolicyFromCodetoText($docRefrain)"/>
                            </originalText>
                        </value>
                    </observation>
                </component>
            </xsl:if>
        </organizer>
    </xsl:template>
    
    <!-- CDA Stylesheet -->
    <xsl:template name="addStylesheet">
        <xsl:processing-instruction name="xml-stylesheet">
            <xsl:text>href=&quot;http://obhita.org/CDA.xsl&quot; type=&quot;text/xsl&quot;</xsl:text>
        </xsl:processing-instruction>          
    </xsl:template>

</xsl:stylesheet>
